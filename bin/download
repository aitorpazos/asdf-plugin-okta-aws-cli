#!/usr/bin/env bash

set -euo pipefail

# set -x

# we must get the os/architecture.
ARCH=$(uname -m)
OS=$(uname -s)
ALTARCH=$(uname -m)

# In the first iteration we only work for Darwin
if [[ "${OS}" != "Darwin" ]]; then
    echo "this version of the plugin only runs on Darwin, ${OS} not supported yet"
    exit 1
fi

# Okta has changed from x86_64 to amd64 for Darwin starting from 0.3.0 (why? something I don't know?) so we need to adapt
if [[ "${ARCH}" == "x86_64" && "${ASDF_INSTALL_VERSION}" == "v0.3.0" ]]; then
    ALTARCH=amd64
elif [[ "${ARCH}" != "x86_64" ]]; then
    echo "cannot run on hardware ${ARCH}"
    exit 1
fi

current_script_path=${BASH_SOURCE[0]}
plugin_dir=$(dirname "$(dirname "$current_script_path")")

# shellcheck source=/dev/null
source "${plugin_dir}/lib/utils.bash"

mkdir -p "$ASDF_DOWNLOAD_PATH"

# TODO: Adapt this to proper extension and adapt extracting strategy.
release_file="$ASDF_DOWNLOAD_PATH/$TOOL_NAME-$ASDF_INSTALL_VERSION.tar.gz"

# Download tar.gz file to the download directory
download_release "$ASDF_INSTALL_VERSION" "$release_file" "${ALTARCH}" "${OS}"

echo "release_file: ${release_file}"
ls -l "$release_file"
echo "ASDF_DOWNLOAD_PATH: ${ASDF_DOWNLOAD_PATH}"

#  Extract contents of tar.gz file into the download directory
echo "Running tar"
pwd
tar -vxzf "$release_file" -C "$ASDF_DOWNLOAD_PATH"  || fail "Could not extract $release_file"

echo "After tar"
echo "ASDF_DOWNLOAD_PATH: ${ASDF_DOWNLOAD_PATH}"
ls -l "${ASDF_DOWNLOAD_PATH}"

echo "========================================================"

# Remove the tar.gz file since we don't need to keep it
rm "$release_file"
